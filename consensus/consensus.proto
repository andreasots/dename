package consensus;

message ConsensusMSG {
	required int64 round = 1;
	required int64 server = 2;
	// one of the following:
	optional bytes push_queue = 3; // [24]nonce[...], crypto_box(request)
	optional bytes commitment = 4; // signed Commitment
	optional bytes ack = 5; // signed Acknowledgement
	optional bytes round_key  = 6; // [32]byte: the round key
	optional Result Publish = 7;
}

message CommitData {
	required int64 round = 1;
	required int64 server = 2;
	required bytes round_key  = 3; // [32]byte
	repeated bytes transaction_queue = 4; // [...]push
}

message Commitment {
	required int64 round = 1;
	required int64 server = 2;
	required bytes hash  = 4; // sha256(CommitData)
}

message Acknowledgement {
	required int64 commiter = 1;
	required int64 acker = 2;
	required bytes commitment  = 3;  // Commitment signed by commiter
}

message Result {
	required bytes consensus_result = 1; // signed
	required bytes aux = 2;
}

message ConsensusResult {
	required int64 round = 1;
	required bytes result = 2;
}
