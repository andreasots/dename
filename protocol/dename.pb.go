// Code generated by protoc-gen-go.
// source: dename.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	dename.proto

It has these top-level messages:
	PublicKey
	Identity
	TransferName
	AcceptTransfer
	SignedAcceptedTransfer
	C2SMessage
	S2CMessage
	LookupResponse
	SignedFreshnessAssertion
	FreshnessAssertion
*/
package protocol

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type PublicKey struct {
	Ed25519          []byte `protobuf:"bytes,1,opt,name=ed25519" json:"ed25519,omitempty"`
	Curve25519       []byte `protobuf:"bytes,2,opt,name=curve25519" json:"curve25519,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}

func (m *PublicKey) GetEd25519() []byte {
	if m != nil {
		return m.Ed25519
	}
	return nil
}

func (m *PublicKey) GetCurve25519() []byte {
	if m != nil {
		return m.Curve25519
	}
	return nil
}

type Identity struct {
	Dename           *PublicKey `protobuf:"bytes,1,req,name=dename" json:"dename,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Identity) Reset()         { *m = Identity{} }
func (m *Identity) String() string { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()    {}

func (m *Identity) GetDename() *PublicKey {
	if m != nil {
		return m.Dename
	}
	return nil
}

type TransferName struct {
	NewIdentity      *Identity `protobuf:"bytes,1,req,name=new_identity" json:"new_identity,omitempty"`
	Name             []byte    `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *TransferName) Reset()         { *m = TransferName{} }
func (m *TransferName) String() string { return proto.CompactTextString(m) }
func (*TransferName) ProtoMessage()    {}

func (m *TransferName) GetNewIdentity() *Identity {
	if m != nil {
		return m.NewIdentity
	}
	return nil
}

func (m *TransferName) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type AcceptTransfer struct {
	Transfer          []byte `protobuf:"bytes,1,req,name=transfer" json:"transfer,omitempty"`
	TransferSignature []byte `protobuf:"bytes,2,req,name=transfer_signature" json:"transfer_signature,omitempty"`
	FreshRoot         []byte `protobuf:"bytes,3,req,name=fresh_root" json:"fresh_root,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *AcceptTransfer) Reset()         { *m = AcceptTransfer{} }
func (m *AcceptTransfer) String() string { return proto.CompactTextString(m) }
func (*AcceptTransfer) ProtoMessage()    {}

func (m *AcceptTransfer) GetTransfer() []byte {
	if m != nil {
		return m.Transfer
	}
	return nil
}

func (m *AcceptTransfer) GetTransferSignature() []byte {
	if m != nil {
		return m.TransferSignature
	}
	return nil
}

func (m *AcceptTransfer) GetFreshRoot() []byte {
	if m != nil {
		return m.FreshRoot
	}
	return nil
}

type SignedAcceptedTransfer struct {
	Accept           []byte `protobuf:"bytes,1,req,name=accept" json:"accept,omitempty"`
	Signature        []byte `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SignedAcceptedTransfer) Reset()         { *m = SignedAcceptedTransfer{} }
func (m *SignedAcceptedTransfer) String() string { return proto.CompactTextString(m) }
func (*SignedAcceptedTransfer) ProtoMessage()    {}

func (m *SignedAcceptedTransfer) GetAccept() []byte {
	if m != nil {
		return m.Accept
	}
	return nil
}

func (m *SignedAcceptedTransfer) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type C2SMessage struct {
	GetRoot          *bool                   `protobuf:"varint,1,opt,name=get_root" json:"get_root,omitempty"`
	Transfer         *SignedAcceptedTransfer `protobuf:"bytes,2,opt,name=transfer" json:"transfer,omitempty"`
	Lookup           []byte                  `protobuf:"bytes,3,opt,name=lookup" json:"lookup,omitempty"`
	GetFreshness     *bool                   `protobuf:"varint,4,opt,name=get_freshness" json:"get_freshness,omitempty"`
	RegToken         []byte                  `protobuf:"bytes,5,opt,name=reg_token" json:"reg_token,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *C2SMessage) Reset()         { *m = C2SMessage{} }
func (m *C2SMessage) String() string { return proto.CompactTextString(m) }
func (*C2SMessage) ProtoMessage()    {}

func (m *C2SMessage) GetGetRoot() bool {
	if m != nil && m.GetRoot != nil {
		return *m.GetRoot
	}
	return false
}

func (m *C2SMessage) GetTransfer() *SignedAcceptedTransfer {
	if m != nil {
		return m.Transfer
	}
	return nil
}

func (m *C2SMessage) GetLookup() []byte {
	if m != nil {
		return m.Lookup
	}
	return nil
}

func (m *C2SMessage) GetGetFreshness() bool {
	if m != nil && m.GetFreshness != nil {
		return *m.GetFreshness
	}
	return false
}

func (m *C2SMessage) GetRegToken() []byte {
	if m != nil {
		return m.RegToken
	}
	return nil
}

type S2CMessage struct {
	RootConsensus     []byte                      `protobuf:"bytes,1,opt,name=root_consensus" json:"root_consensus,omitempty"`
	TransferLooksGood *bool                       `protobuf:"varint,2,opt,name=transfer_looks_good" json:"transfer_looks_good,omitempty"`
	LookupResponse    *LookupResponse             `protobuf:"bytes,3,opt,name=lookup_response" json:"lookup_response,omitempty"`
	Freshness         []*SignedFreshnessAssertion `protobuf:"bytes,4,rep,name=freshness" json:"freshness,omitempty"`
	XXX_unrecognized  []byte                      `json:"-"`
}

func (m *S2CMessage) Reset()         { *m = S2CMessage{} }
func (m *S2CMessage) String() string { return proto.CompactTextString(m) }
func (*S2CMessage) ProtoMessage()    {}

func (m *S2CMessage) GetRootConsensus() []byte {
	if m != nil {
		return m.RootConsensus
	}
	return nil
}

func (m *S2CMessage) GetTransferLooksGood() bool {
	if m != nil && m.TransferLooksGood != nil {
		return *m.TransferLooksGood
	}
	return false
}

func (m *S2CMessage) GetLookupResponse() *LookupResponse {
	if m != nil {
		return m.LookupResponse
	}
	return nil
}

func (m *S2CMessage) GetFreshness() []*SignedFreshnessAssertion {
	if m != nil {
		return m.Freshness
	}
	return nil
}

type LookupResponse struct {
	Path             []byte `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	PublicKey        []byte `protobuf:"bytes,3,opt,name=public_key" json:"public_key,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LookupResponse) Reset()         { *m = LookupResponse{} }
func (m *LookupResponse) String() string { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()    {}

func (m *LookupResponse) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *LookupResponse) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type SignedFreshnessAssertion struct {
	Server           *int64 `protobuf:"varint,1,req,name=server" json:"server,omitempty"`
	Assertion        []byte `protobuf:"bytes,2,req,name=assertion" json:"assertion,omitempty"`
	Signature        []byte `protobuf:"bytes,3,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SignedFreshnessAssertion) Reset()         { *m = SignedFreshnessAssertion{} }
func (m *SignedFreshnessAssertion) String() string { return proto.CompactTextString(m) }
func (*SignedFreshnessAssertion) ProtoMessage()    {}

func (m *SignedFreshnessAssertion) GetServer() int64 {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return 0
}

func (m *SignedFreshnessAssertion) GetAssertion() []byte {
	if m != nil {
		return m.Assertion
	}
	return nil
}

func (m *SignedFreshnessAssertion) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type FreshnessAssertion struct {
	Time             *int64 `protobuf:"varint,1,req,name=time" json:"time,omitempty"`
	Finalized        *bool  `protobuf:"varint,2,opt,name=finalized" json:"finalized,omitempty"`
	Round            *int64 `protobuf:"varint,3,req,name=round" json:"round,omitempty"`
	Root             []byte `protobuf:"bytes,4,req,name=root" json:"root,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FreshnessAssertion) Reset()         { *m = FreshnessAssertion{} }
func (m *FreshnessAssertion) String() string { return proto.CompactTextString(m) }
func (*FreshnessAssertion) ProtoMessage()    {}

func (m *FreshnessAssertion) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *FreshnessAssertion) GetFinalized() bool {
	if m != nil && m.Finalized != nil {
		return *m.Finalized
	}
	return false
}

func (m *FreshnessAssertion) GetRound() int64 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *FreshnessAssertion) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func init() {
}
